package Ex09CustomListIterator;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class CustomList<T extends Comparable<T>> implements Iterable<T> {
    private List<T> elements;

    public CustomList(){
        this.elements = new ArrayList<>();
    }
//• void add(T element)
//•	T remove(int index)
//•	boolean contains(T element)
//•	void swap(int index, int index)
//•	int countGreaterThan(T element)
//•	T getMax()
//•	T getMin()

    public void add(T element){
        this.elements.add(element);
    }
    public T remove(int index){
        return this.elements.remove(index);
    }
    public boolean contains(T element){
        return this.elements.contains(element);
    }
    public void swap(int index1, int index2){
        T firstElement = this.elements.get(index1);
        this.elements.set(index1,this.elements.get(index2));
        this.elements.set(index2, firstElement);
    }
    public T get(int index){
        return this.elements.get(index);
    }
    public int size(){
        return this.elements.size();
    }
    public long countGreaterThan(T element){
        return this.elements.stream().filter(e -> e.compareTo(element) > 0).count();
    }
    public T getMax(){
        T maxElement = this.elements.get(0);
        for (T element : elements) {
            if (element.compareTo(maxElement) > 0){
                maxElement = element;
            }
        }
        return maxElement;
    }
    public T getMin(){
        T minElement = this.elements.get(0);
        for (T element : elements) {
            if (element.compareTo(minElement) < 0){
                minElement = element;
            }
        }
        return minElement;
    }
//    public boolean isIndexValid(int index){
//        boolean isValid = false;
//        if (index >= 0 && index < this.elements.size()){
//            isValid = true;
//        }
//        return isValid;
//    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        for (T element : elements) {
            sb
                    .append(String.format("%s",element))
                    .append(System.lineSeparator());

        }
        return sb.toString().trim();
    }

    @Override
    public Iterator<T> iterator() {
        return new Iterator<T>() {
            private int index = 0;
            @Override
            public boolean hasNext() {
                return index < elements.size();
            }

            @Override
            public T next() {
                T element = elements.get(index);
                index++;
                return element;

            }
        };
    }
}
