package P02Snake;

import java.lang.reflect.Array;
import java.util.Scanner;

public class P02Snake {
    public static int snakeRow = 0;
    public static int snakeCol = 0;

    public static int foodEaten = 0;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = Integer.parseInt(scanner.nextLine());
        char[][] matrix = new char[n][n];

        for (int row = 0; row < n; row++) {
         String line = scanner.nextLine();
         if (line.contains("S")){
             snakeRow = row;
             snakeCol = line.indexOf("S");
         }
         matrix[row] = line.toCharArray();
        }


        while(foodEaten < 10) {
            String command = scanner.nextLine();

            if (command.equals("up")) {
                // row--
                if (!isOutOfBounds(matrix, snakeRow, snakeCol, snakeRow - 1, snakeCol)) {
                    if (!moveSnake(matrix, snakeRow, snakeCol,snakeRow - 1, snakeCol)) {
                        snakeRow--;
                    }
                } else {
                    break;
                }

            } else if (command.equals("down")) {
                // row++
                if (!isOutOfBounds(matrix, snakeRow, snakeCol, snakeRow + 1, snakeCol)) {
                    if (!moveSnake(matrix, snakeRow, snakeCol,snakeRow + 1, snakeCol)) {
                        snakeRow++;
                    }
                } else {
                    break;
                }

            } else if (command.equals("left")) {
                // col--
                if (!isOutOfBounds(matrix, snakeRow, snakeCol, snakeRow, snakeCol - 1)) {
                    if (!moveSnake(matrix, snakeRow, snakeCol,snakeRow, snakeCol - 1)) {
                        snakeCol--;
                    }
                } else {
                    break;
                }

            } else if (command.endsWith("right")) {
                // col++
                if (!isOutOfBounds(matrix, snakeRow, snakeCol, snakeRow, snakeCol + 1)) {
                    if (!moveSnake(matrix, snakeRow, snakeCol,snakeRow, snakeCol + 1)) {
                        snakeCol++;
                    }
                } else {
                    break;
                }
            }

        }

        if (foodEaten >= 10){
            System.out.println("You won! You fed the snake.");
        } else {
            System.out.println("Game over!");
            matrix[snakeRow][snakeCol] = '.';
        }
        System.out.printf("Food eaten: %d%n",foodEaten);

        printMatrix(matrix);
    }

    private static boolean moveSnake(char[][] matrix,int oldSnakeRow, int oldSnakeCol, int newSnakeRow, int newSnakeCol) {
        boolean isB = false;
        matrix[oldSnakeRow][oldSnakeCol] = '.';
        if (matrix[newSnakeRow][newSnakeCol] == '*') {
            foodEaten++;
            matrix[newSnakeRow][newSnakeCol] = 'S';
        } else if (matrix[newSnakeRow][newSnakeCol] == '-') {
            matrix[newSnakeRow][newSnakeCol] = 'S';
        } else if (matrix[newSnakeRow][newSnakeCol] == 'B') {
            for (int row = 0; row < matrix.length; row++) {
                for (int col = 0; col < matrix[row].length; col++) {
                    if (matrix[row][col] == 'B' && (row != newSnakeRow || col != newSnakeCol)) {
                        matrix[newSnakeRow][newSnakeCol] = '.';
                        snakeRow = row;
                        snakeCol = col;
                        matrix[row][col] = 'S';
                        isB =  true;
                    }
                }
            }
        }
        return isB;
    }

    public static boolean isOutOfBounds(char[][] matrix, int oldSnakeRow, int oldSnakeCol,
                                        int newSnakeRow, int newSnakeCol){
        boolean isOut = true;
        if (newSnakeRow >= 0 && newSnakeRow < matrix.length && newSnakeCol >= 0 && newSnakeCol < matrix[newSnakeRow].length){
            isOut = false;
        }
        return isOut;
    }
    public static void printMatrix(char[][] matrix){
        for (int row = 0; row < matrix.length ; row++) {
            for (int col = 0; col < matrix[row].length ; col++) {
                System.out.print(matrix[row][col]);
            }
            System.out.println();
        }
    }
}
