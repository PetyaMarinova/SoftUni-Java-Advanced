package p01Scheduling;

import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.Collectors;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] tasks = Arrays.stream(scanner.nextLine().split(", ")).mapToInt(Integer::parseInt).toArray();
        int[] threats = Arrays.stream(scanner.nextLine().split("\\s+")).mapToInt(Integer::parseInt).toArray();
        int taskToKill = Integer.parseInt(scanner.nextLine());

        ArrayDeque<Integer> stackTasks = new ArrayDeque<>();
        ArrayDeque<Integer> queueThreats = new ArrayDeque<>();

        for (int i = 0; i < tasks.length; i++) {
            stackTasks.push(tasks[i]);
        }
        for (int i = 0; i < threats.length; i++) {
            queueThreats.add(threats[i]);
        }

        while(stackTasks.contains(taskToKill)){
            int firstThread = queueThreats.peek();;
            int firstTask = stackTasks.peek();
            if (firstTask == taskToKill){
                stackTasks.pop();
                System.out.printf("Thread with value %d killed task %d%n",firstThread, taskToKill);
                break;
            }
            if (firstThread >= firstTask){
                stackTasks.pop();
                queueThreats.poll();
            } else {
                queueThreats.poll();
            }

        }
        String remainingThreats = queueThreats.stream().map(String::valueOf).collect(Collectors.joining(" "));
        System.out.println(remainingThreats);
    }
}
