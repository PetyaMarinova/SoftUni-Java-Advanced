package p02Bee;

import java.util.Scanner;

public class Main {
    public static int rowBee;
    public static int colBee;
    public static int pollination;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = Integer.parseInt(scanner.nextLine());

        char[][] matrix = new char[n][n];

        for (int row = 0; row < n; row++) {
            String line = scanner.nextLine();
            if (line.contains("B")){
                rowBee = row;
                colBee = line.indexOf('B');
            }
            matrix[row] = line.toCharArray();
        }
        String command = scanner.nextLine();
        while(!command.equals("End")){
            if (command.equals("up")){
                //row--
                if (!isOutOfBounds(rowBee - 1, colBee, matrix)){
                    moveBee(rowBee,colBee,rowBee - 1, colBee, matrix, command);
                } else {
                    System.out.println("The bee got lost!");
                    matrix[rowBee][colBee] = '.';
                    break;
                }
            } else if (command.equals("down")){
                //row++
                if (!isOutOfBounds(rowBee + 1, colBee, matrix)){
                    moveBee(rowBee,colBee,rowBee + 1, colBee, matrix, command);
                } else {
                    System.out.println("The bee got lost!");
                    matrix[rowBee][colBee] = '.';
                    break;
                }
            } else if (command.equals("left")){
                //col--
                if (!isOutOfBounds(rowBee, colBee - 1, matrix)){
                    moveBee(rowBee,colBee,rowBee, colBee - 1, matrix, command);
                } else {
                    System.out.println("The bee got lost!");
                    matrix[rowBee][colBee] = '.';
                    break;
                }
            } else if (command.equals("right")){
                //col++
                if (!isOutOfBounds(rowBee, colBee + 1, matrix)){
                    moveBee(rowBee,colBee,rowBee, colBee + 1, matrix, command);
                } else {
                    System.out.println("The bee got lost!");
                    matrix[rowBee][colBee] = '.';
                    break;
                }
            }
            command = scanner.nextLine();
        }
        if (pollination < 5){
            System.out.printf("The bee couldn't pollinate the flowers, she needed %d flowers more%n",Math.abs(5 - pollination));
        } else {
            System.out.printf("Great job, the bee manage to pollinate %d flowers!%n",pollination);
        }

        printMatrix(matrix);
    }

    private static void moveBee(int oldRow, int oldCol, int newRow, int newCol, char[][] matrix, String command) {
        matrix[oldRow][oldCol] = '.';
        if (matrix[newRow][newCol] == '.'){
            matrix[newRow][newCol] = 'B';
            rowBee = newRow;
            colBee = newCol;
        } else if (matrix[newRow][newCol] == 'f'){
            pollination += 1;
            matrix[newRow][newCol] = 'B';
            rowBee = newRow;
            colBee = newCol;
        } else if (matrix[newRow][newCol] == 'O'){
            if (command.equals("up")){
                //row--
                moveBeeAfterBonus(newRow, newCol, newRow - 1, newCol, matrix);
            } else if (command.equals("down")){
                //row++
                moveBeeAfterBonus(newRow, newCol, newRow + 1, newCol, matrix);
            } else if (command.equals("left")){
                //col--
                moveBeeAfterBonus(newRow, newCol, newRow, newCol - 1, matrix);
            } else if (command.equals("right")){
                //col++
                moveBeeAfterBonus(newRow, newCol, newRow, newCol + 1, matrix);
            }
        }
    }

    private static void moveBeeAfterBonus(int oldRow, int oldCol, int newRow, int newCol, char[][] matrix) {
        matrix[oldRow][oldCol] = '.';
        if (matrix[newRow][newCol] == '.'){
            matrix[newRow][newCol] = 'B';
            rowBee = newRow;
            colBee = newCol;
        } else if (matrix[newRow][newCol] == 'f') {
            pollination += 1;
            matrix[newRow][newCol] = 'B';
            rowBee = newRow;
            colBee = newCol;
        }
    }

    private static boolean isOutOfBounds(int newRow, int newCol, char[][] matrix) {
        boolean isOut = true;
        if (newRow >= 0 && newRow < matrix.length && newCol >= 0 && newCol < matrix[newRow].length){
            isOut = false;
        }
        return isOut;
    }

    public static void printMatrix(char[][] matrix){
        for (int row = 0; row < matrix.length ; row++) {
            for (int col = 0; col < matrix[row].length ; col++) {
                System.out.print(matrix[row][col]);
            }
            System.out.println();
        }
    }
}
